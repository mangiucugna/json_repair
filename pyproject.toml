[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"
[project]
name = "json_repair"
version = "0.52.3"
license = "MIT"
license-files = ["LICENSE"]
authors = [
  { name="Stefano Baccianella", email="4247706+mangiucugna@users.noreply.github.com" },
]
description = "A package to repair broken json strings"
keywords = ["JSON", "REPAIR", "LLM", "PARSER"]
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
]
[project.urls]
"Homepage" = "https://github.com/mangiucugna/json_repair/"
"Bug Tracker" = "https://github.com/mangiucugna/json_repair/issues"
"Live demo" = "https://mangiucugna.github.io/json_repair/"
[tool.pytest.ini_options]
pythonpath = [
  "."
]
[tool.coverage.run]
source = ["src"]
omit = [
    "*/.cursor/extensions/*",
    "*/pythonFiles/lib/python/*",
    "*/site-packages/*",
    "src/json_repair/__main__.py",
]
[tool.coverage.report]
include = [
    "src/json_repair/*",
]
exclude_also = [
    'def __repr__',
    'if self.debug:',
    'if settings.DEBUG',
    'raise AssertionError',
    'raise NotImplementedError',
    'if 0:',
    'if __name__ == .__main__.:',
    'if TYPE_CHECKING:',
    'class .*\bProtocol\):',
    '@(abc\.)?abstractmethod',
]
[tool.setuptools.package-data]
"pkgname" = ["py.typed"]
[tool.setuptools.packages.find]
where = ["src"]
[project.scripts]
json_repair = "json_repair.__main__:cli"
[tool.ruff]
# Same as Black.
indent-width = 4
line-length = 120
# Assume Python 3.13
target-version = "py313"
[tool.ruff.lint]
# Read more here https://docs.astral.sh/ruff/rules/
# By default, Ruff enables Flake8's E and F rules
# FastAPI - FAST
# Flake8-bandit - S
# Flake8-bugbear – catches real-world Python footguns - B
# Flake8-builtins - A
# Flake8-comprehensions  - C4
# Flake8-commas - COM
# Flake8-quotes - Q
# Flake8-tidy-imports - TID
# Flake8-unused-arguments - ARG
# Isort - I
# Mccabe – code complexity warnings - C90
# PEP 8 Naming convention - N
# Pycodestyle - E, W
# Pyflakes - F
# Pylint - PLC, PLE, PLR, PLW
# PyTest - PT
# Pyupgrade – safe modernization (e.g., str() → f"") - UP
# Ruff specific - RUF
# Simplifications (e.g., if x == True → if x) - SIM
select = ['A', 'ARG', 'B', 'C4', 'COM', 'C90', 'E', 'F', 'I', 'N', 'PLC', 'PLE', 'PLW', 'PT', 'Q', 'S', 'SIM', 'TID', 'UP', 'W']
# Only enable these RUF rules
extend-select = [
  "RUF001",  # ambiguous Unicode
  "RUF012",  # mutable default arguments
  "RUF013",  # unnecessary super()
  "RUF016",  # unnecessary else after return (optional)
  "RUF018",  # unnecessary else after raise (optional)
]
ignore = [
  "S101",   # assert: Use of assert detected. We like assert
  "COM812", # Ruff: The following rule may cause conflicts when used with the formatter
  "E501",   # Line too long
  "C901",   # `function` is too complex
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
# Explicit re-exports is fine in __init__.py, still a code smell elsewhere.
"__init__.py" = ["PLC0414"]
